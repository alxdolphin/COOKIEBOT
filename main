from keep_alive import keep_alive
import random
##
import pytube
import asyncio
import os

TOKEN = 'OTQxNzI5NzE2MzY3Mzk2ODk2.YgaMJA.gBpQpNgJ1TjtKU_HMA_rygemj84'

client = discord.Client()
counter = 2
quiet = False
#
queues = {}
#


@client.event
async def on_ready():
    print("We have logged in as {0.user}".format(client))


##
async def play_song(guild, file_path):
    guild.voice_client.play(discord.FFmpegPCMAudio(file_path),
                            after=lambda error: on_finished(guild, error))


def on_finished(guild, error):
    # Remove the finished song from the queue
    if error:
        print('Error: ', error)

    guild.voice_client.stop()

    if len(queues[guild.id]) > 0:
        os.remove(queues[guild.id][0])
        queues[guild.id].pop(0)

    # Play the next song in the queue, if there is one
    if len(queues[guild.id]) > 0:
        asyncio.run_cine_threadsafe(play_song(guild, queues[guild.id][0]),
                                         client.loop)


#
@client.event
async def on_message(message):
    if message.content.startswith('!play '):
        print(0)
        # Get the URL of the YouTube video from the message content
        url = message.content.split()[1]

        # Get the voice channel of the user who sent the message
        voice_channel = message.author.voice.channel
        print(0.5)
        # Create a new Pytube YouTube object
        video = pytube.YouTube(url)
        print(0.8)
        # Get the highest quality audio stream
        audio_stream = video.streams.filter(only_audio=True).first()
        print(0.10)
        # Download the audio stream
        audio_file = audio_stream.download()
        print(0.20)
        # Add the audio file to the queue for the server

        if message.guild.id in queues:
            print(1)
            queues[message.guild.id].append(audio_file)
        else:
            print(2)
            queues[message.guild.id] = [audio_file]

            # Join the voice channel
        if not message.guild.voice_client:
            print(3)
            await voice_channel.connect()

            # Start playing the first song in the queue
        if not message.guild.voice_client.is_playing():
            print(4)
            await play_song(message.guild, queues[message.guild.id][0])
            await message.channel.send('Now playing!')
        elif message.content.startswith('!skip'):
            # Skip the current song
            message.guild.voice_client.stop()

    ##

        global counter
        global quiet
        username = str(message.author).split('#')[0]
        user_message = str(message.content)
        channel = str(message.channel.name)
        print(f'{username}: {user_message} ({channel})')

        if message.author == client.user:
            return

        if user_message.lower() == '!cmds':
            await message.channel.send(
                '!cmds:\nList of commands obviously\n!lottery:\nGives you a random number from 0 to 999999\n!mw2loadouts {primary weapon of choice(ar, smg, sniper) or \"secondary\" for secondary weapon goes here}\n!cat or !cats:\nBlesses your existence with one of four cat videos'
            )
            return

        if user_message.lower() == '!lottery':
            await message.channel.send(
                f'This is your random number: {random.randrange(999999)}')
            return

        if '!mw2loadouts' in user_message.lower().split(
                " ") and username == "Fl0ppyFish":
            await message.channel.send(
                "Just use that stupid fire shotgun of yours you bum")
        elif "!mw2loadouts" in user_message.lower().split(
                " ") and "ar" in user_message.lower().split(" "):
            await message.channel.send(
                "TAQ-56\nBarrel: 17.5\" Tundra Pro Barrel\nUnderbarrel: FSS Sharkfin 90\nAmmunition: 5.56 High Velocity\nRear Grip: Demo Cleanshot Grip\nStock: TV Xline Pro"
            )
        elif "!mw2loadouts" in user_message.lower().split(
                " ") and "smg" in user_message.lower().split(" "):
            await message.channel.send(
                "Vaznev-9k\nMuzzle: Bruen Pendulum\nUnderbarrel: FSS Sharkfin 90\nStock: Otrezat Stock\nRear Grip: True-Tac Grip"
            )
        elif "!mw2loadouts" in user_message.lower().split(
                " ") and "sniper" in user_message.lower().split(" "):
            await message.channel.send(
                "MCPR-300\nAmmunition: .300 Mag High Velocity\nMagazine: 5 Round Mag\nRear Grip: Cronen Cheetah Grip\nStock: FSS Merc Stock\nOR\nLA-B 330\nBarrel: 23.5\‚Äù Fluted R-67 Barrel\nBolt: FSS ST87 Bolt\nStock: ZLR T70 Pad Extension Stock"
            )
        elif "!mw2loadouts" in user_message.lower().split(
                " ") and "secondary" in user_message.lower().split(" "):
            await message.channel.send(
                "Knife OR\nX12\nMuzzle: XRK Ventor-900\nTrigger Action: XRK Ligting Fire\nRear Grip: Cronen Lima-6"
            )

        if user_message.lower() == '!cat' or user_message.lower() == '!cats':
            catVidNum = random.randrange(4)
            if catVidNum == 0:
                await message.channel.send(
                    "https://www.youtube.com/shorts/2jqrumSAbUw")
                return
            elif catVidNum == 1:
                await message.channel.send(
                    "https://www.youtube.com/watch?v=vwsk2AyAl1w")
                return
            elif catVidNum == 2:
                await message.channel.send(
                    "https://www.youtube.com/watch?v=RL6-etT59w4")
                return
            else:
                await message.channel.send(
                    "https://www.youtube.com/shorts/nRBERbcbFgY")
                return
        if user_message.lower() == '!cookies?':
            flipacoin = random.randrange(2)
            if flipacoin == 0:
                await message.channel.send("EAT THE COOOOOOKIEEEEEE!!!")
                return
            else:
                await message.channel.send("DONT EAT THE COOKIE IT'S MINE!!!")
                return

        if quiet == True and "cookie" in user_message.lower().split(" "):
            if counter == 2:
                await message.channel.send("You told me to be quiet. :(")
                counter -= 1
            elif counter == 1:
                await message.channel.send("Oh... so now you need me, huh?")
                counter -= 1
            else:
                counter == 2
                quiet == False
                await message.channel.send(
                    "Guess i'll come back since you're hopeless without me anyway"
                )

        else:
            if "cookie" in user_message.lower():
                await message.channel.send(f"{username}, you have Cookies???")
            elif "thank" in user_message.lower(
            ).split(" ") and "you" in user_message.lower(
            ).split(" ") and "cookie" in user_message.lower().split(
                    " ") or "thanks" in user_message.lower().split(
                        " ") and "cookie" in user_message.lower().split(" "):
                await message.channel.send(f"You are very welcome {username}")
            elif "shut" in user_message.lower().split(
                    " ") and "up" in user_message.lower().split(
                        " ") and "cookie" in user_message.lower().split(" "):
                await message.channel.send(
                    f"Sorry {username}, I'll be quiet for the next few times you say my name"
                )
                quiet = True


keep_alive()
client.run(TOKEN)